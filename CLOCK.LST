Microsoft (R) Macro Assembler Version 6.11		    10/31/16 02:21:30
clock.asm						     Page 1 - 1


				TITLE	clock.asm

				; Author: Eseosa Asiruwa
				; Last update: October 30, 2016
				;
				; This program uses interuppt techniques, using a small model program that
				; continously updates a real-time clock (hours, minutes, seconds) for as long
				; as the program is running. When both shift keys are pressed, the clock is
				; displayed on and off. Also, when the ctrl key is pressed, the clock toggles
				; between 12-hour and 24-hour.


				INCLUDE Irvine16.inc
			      C ; Irvine16.inc - Include file for programs using
			      C ; the Irvine16.lib (Real-address mode library).
			      C 
			      C ; Last update: 7/29/05
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				.8086
 0000				.data

 0000				.code
 0000 30 31 32 33 34 35		time byte "0123456789"
       36 37 38 39
 000A 3A			colon byte ":"
 000B  0001 [			hours byte 1 DUP(?)
        00
       ]
 000C  0001 [			minutes byte 1 DUP(?)
        00
       ]
 000D  0001 [			seconds byte 1 DUP(?)
        00
       ]
 000E 00			rshift byte 0
 000F 00			lshift byte 0
 0010 00			showit byte 0
 0011 00			switch byte 0
 0012 00			hourx byte 0

 0013				OutClock PROC
					; STDCALL 16-bit value parameter
					; Output time in hr:min:secs depending on whether the user has
					; toggled for the clock to be in 12hr or 24hr format

 0013  55				push bp			; Set up stack for retrieving parameter
 0014  8B EC				mov bp, sp

 0016  50				push ax			; Push used registers to the stack
 0017  53				push bx
 0018  51				push cx
 0019  52				push dx

 001A  B9 0004				mov cx, 4		; Move 4 to CX for shifting
 001D  B4 0E				mov ah, 0Eh		; Bios output routine

 001F  50			        push ax			; Save values that are in AX
 0020  51				push cx			; and CX
 0021  B4 02			        mov ah, 02h		; Move to AH the bios routine for getting time
 0023  CD 1A			        int 1Ah			; in BCD
 0025  2E: 88 2E 000B R			mov hours, ch		; The function returns hours in ch, min in cl,
 002A  2E: 88 0E 000C R			mov minutes, cl		; and secs in dh. Move these values into memory
 002F  2E: 88 36 000D R			mov seconds, dh		; to be used in the function later
 0034  59				pop cx			; Pop back the originals values to CX
 0035  58			        pop ax			; and AX

 0036  2E: 80 3E 0011 R			cmp switch, 0		; Check if time should be shown in 12 or 24hr
       00
 003C  75 38				jne miltime		; If switch is 0FFh, then show in 24hr
 003E  2E: 80 3E 000B R			cmp hours, 12		; If 12, check if the current time is PM
       0C
 0044  7C 15				jl sethourx		; if its AM, jump to seperate instructions
 0046  50				push ax			; but if it is, time must be adjusted, save AX
 0047  2E: A0 000B R			mov al, hours		; Move current BCD hours to al
 004B  2C 12				sub al, 12h		; subtract 12h from hours and
 004D  2F				das			; new value is adjusted
 004E  2E: A2 000B R			mov hours, al		; move new found value back to place in memory
 0052  58				pop ax			; restore AX
 0053  2E: C6 06 0012 R			mov hourx, 1		; Adjust variable to reflect that time is in PM
       01
 0059  EB 06				jmp checkhr		; Jump to checking for 0
 005B				sethourx:
 005B  2E: C6 06 0012 R			mov hourx, 0		; If the time is in AM, change variable to 0
       00
 0061				checkhr:
 0061  2E: 80 3E 000B R			cmp hours, 0		; Check if current hour is 0
       00
 0067  7F 0D				jg miltime		; if it is greater, jump to printing time
 0069  50				push ax			; If not, save AX to prepare for BCD adjust
 006A  2E: A0 000B R			mov al, hours		; Move the current hours to AX
 006E  04 12				add al, 12h		; Add 12h to current hours and
 0070  27				daa			; the new value is adjusted
 0071  2E: A2 000B R			mov hours, al		; Move new found value back to place in memory
 0075  58				pop ax			; Restore AX register
 0076				miltime:
 0076  51				push cx			; Save CX register
 0077  B9 0004				mov cx, 4		; Move to CX 4 for shifting
 007A  2E: 8A 1E 000B R			mov bl, hours		; Move current hours to bl for shifting
 007F  D3 EB				shr bx, cl		; Shift to isolate first nybble

 0081  B0 20				mov al, 20h
 0083  CD 10				int 10h

 0085  2E: 8A 87 0000 R			mov al, time[bx]	; Move found nybble character to al
 008A  CD 10				int 10h			; Print character to the screen
 008C  2E: 8A 1E 000B R			mov bl, hours		; Move hours back to bl
 0091  83 E3 0F				and bx, 000Fh		; Isolate the second nybble
 0094  2E: 8A 87 0000 R			mov al, time[bx]	; Move second found nybble character to al
 0099  CD 10				int 10h			; Print character to screen

 009B  2E: A0 000A R			mov al, colon		; Move colon character to al
 009F  CD 10				int 10h			; Print to screen

 00A1  2E: 8A 1E 000C R			mov bl, minutes		; Move current minutes to bl for shifting
 00A6  D3 EB				shr bx, cl 		; Shift to isolate first nybble
 00A8  2E: 8A 87 0000 R			mov al, time[bx]	; Move found nybble character to al
 00AD  CD 10				int 10h 		; Print character to screen
 00AF  2E: 8A 1E 000C R			mov bl, minutes 	; Move minutes back to bl
 00B4  83 E3 0F				and bx, 000Fh  		; Isolate the second nybble
 00B7  2E: 8A 87 0000 R			mov al, time[bx] 	; Move second found nybble character to al
 00BC  CD 10				int 10h 		; Print character to screen

 00BE  2E: A0 000A R			mov al, colon 		; Move colon character to al
 00C2  CD 10				int 10h 		; Print to screen

 00C4  2E: 8A 1E 000D R			mov bl, seconds 	; Move current secs to bl for shifting
 00C9  D3 EB				shr bx, cl 		; Shift to isolate first nybble
 00CB  2E: 8A 87 0000 R			mov al, time[bx] 	; Move found nybble character to al
 00D0  CD 10				int 10h 		; Print character to screen
 00D2  2E: 8A 1E 000D R			mov bl, seconds 	; Move secs back to bl
 00D7  83 E3 0F				and bx, 000Fh  		; Isolate the second nybble
 00DA  2E: 8A 87 0000 R			mov al, time[bx] 	; Move second found nybble character to al
 00DF  CD 10				int 10h 		; Print character to screen

 00E1  2E: 80 3E 0011 R			cmp switch, 0 		; Check the clock is set to print in 24hr
       00
 00E7  75 20				jne removeampm		; If it is jump to removing the AM/PM

 00E9  B0 20				mov al, 20h 		; Move a space character to al
 00EB  CD 10				int 10h			; Print a leading space for leading space

 00ED  2E: 80 3E 0012 R			cmp hourx, 0		; Check if time is in AM or PM
       00
 00F3  75 0A				jne printpm		; Jump to printing PM if variable is one
 00F5  B0 41				mov al, 41h		; Move to al the character A
 00F7  CD 10				int 10h			; Print character to the screen
 00F9  B0 4D				mov al, 4Dh		; Move to al the character M
 00FB  CD 10				int 10h			; Print character to the screen
 00FD  EB 14				jmp done		; Printing is finished, exit
 00FF				printpm:			; If time is in PM
 00FF  B0 50				mov al, 50h		; Move to al the character P
 0101  CD 10				int 10h			; Print character to the screen
 0103  B0 4D				mov al, 4Dh		; Move to al the character M
 0105  CD 10				int 10h			; Print character to the screen
 0107  EB 0A				jmp done		; Printing is finished, exit

 0109				removeampm:			; Remove remenents of 12 hour time
 0109  51				push cx			; Save value in CX
 010A  B9 0004				mov cx, 4		; Move to CX number of spaces to write
 010D  B0 20				mov al, 20h		; Move al the space character
 010F					remove:			; Create loop for printing space
 010F  CD 10				  int 10h		; Call bios instruction to print
 0111  E2 FC				  loop remove
 0113				done:
 0113  5A				pop dx			; Restore all registers
 0114  59				pop cx
 0115  5B				pop bx
 0116  58				pop ax

 0117  8B E5				mov sp, bp
 0119  5D				pop bp
 011A  C2 0002				ret 2
 011D				OutClock ENDP

 011D				JumpCursor PROC
					; IN: DH row, DL column
					; Move the cursor on page 0.
 011D  50				push ax
 011E  53				push bx
 011F  B7 00				mov bh, 0
 0121  B8 0200				mov ax, 0200h
 0124  CD 10				int 10h
 0126  5B				pop bx
 0127  58				pop ax
 0128  C3				ret
 0129				JumpCursor ENDP

 0129				OutClockCorner PROC
					; IN: 16 bit parameter
				        ; [bp+4] count

 0129  55				push bp
 012A  8B EC				mov bp, sp

 012C  50				push ax				; Push used registers to the stack
 012D  53				push bx
 012E  51				push cx
 012F  52				push dx

 0130  B7 00				mov bh, 0
 0132  B8 0300				mov ax, 0300h			; Get cursor position
 0135  CD 10				int 10h
 0137  52				push dx				; Remember it

 0138  B6 00				mov dh, 0			; Set the row and column
 013A  B2 43				mov dl, 67
 013C  E8 FFDE				call JumpCursor
 013F				continue:
 013F  FF 76 04				push [bp + 4]			; Output the parameter
 0142  E8 FECE				call OutClock
 0145				done:
 0145  5A				pop dx				; Move the cursor back!
 0146  E8 FFD4				call JumpCursor

 0149  5A				pop dx				; Restore registers
 014A  59				pop cx
 014B  5B				pop bx
 014C  58				pop ax

 014D  8B E5				mov sp, bp
 014F  5D				pop bp
 0150  C2 0002				ret 2
 0153				OutClockCorner ENDP

 0153 00000000			orig_09 dword ?
 0157 00000000			orig_08 dword ?
 015B 0000			count word ?

 015D				handle08 PROC
 015D  2E: 83 06 015B R			add count, 55			; Adding to get time every 55 milisecs
       37
 0163  2E: 81 3E 015B R			cmp  count, 1000		; Checking if count has reached a sec
       03E8
 016A  7E 1C				jle done			; if it hasnt, dont get the time
 016C  2E: 81 2E 015B R			sub count, 1000			; if it has, subtract to reset counter
       03E8
 0173				continue:				; and print clock
 0173  2E: 80 3E 0010 R			cmp showit, 0			; Check to see whether to show clock
       00
 0179  75 0A				jne clear			; if showit is not 1, then clear clock
 017B  2E: FF 36 015B R			push count			; if not push the count parameter
 0180  E8 FFA6				call OutClockCorner		; and display the clock
 0183  EB 03				jmp done			; when clock is displayed, you're done
 0185				clear:
 0185  E8 0072				call clear_clock		; Clock is toggled to not display
 0188				done:
 0188  9C				pushf				; Push flags and return to where you
 0189  2E: FF 1E 0157 R			call orig_08			; were before interrupt
 018E  CF				iret
 018F				handle08 ENDP

 018F				handle09 PROC
 018F  9C				pushf
 0190  2E: FF 1E 0153 R			call orig_09			; handle the keyboard interrupt!
									; This is an indirect far call
 0195  50				push ax
 0196  B4 00				mov ah, 0
 0198  E4 60				in al, 60h			; Read the current key

 019A				ctrld:					; First check to see if ctrl pressed
 019A  3C 9D				cmp al, 9Dh			; If it was not released
 019C  75 07				jne rightdown			; jump to next check point
 019E  2E: F6 16 0011 R			not switch			; if it was, change variable
 01A3  EB 53				jmp done			; exit from function
 01A5				rightdown:
 01A5  3C 36				cmp al, 36h 			; Check for rshift pressed down
 01A7  75 08				jne rightup			; if it was not pressed, jump to next
 01A9  2E: C6 06 000E R			mov rshift, 1			; if it was, change rshift variable
       01
 01AF  EB 32				jmp check			; jump to checking both shifts
 01B1				rightup:
 01B1  3C B6				cmp al, 0B6h			; Check for rshift released
 01B3  75 08				jne leftdown			; if it was not released, jump to next
 01B5  2E: C6 06 000E R			mov rshift, 2			; if it was change rshift var again
       02
 01BB  EB 26				jmp check			; jump to checking both shifts
 01BD				leftdown:
 01BD  3C 2A				cmp al, 2Ah			; Check for lshift pressed down
 01BF  75 08				jne leftup			; if it was not pressed, jump to next
 01C1  2E: C6 06 000F R			mov lshift, 1			; if it was, change lshift var
       01
 01C7  EB 1A				jmp check			; jump to checking both shifts
 01C9				leftup:
 01C9  3C AA				cmp al, 0AAh			; Check for lshift released
 01CB  75 08				jne other			; if it was not released, jump to next
 01CD  2E: C6 06 000F R			mov lshift, 2			; if it wasm change lshift var
       02
 01D3  EB 0E				jmp check			; jump to checking both shifts
 01D5				other:
 01D5  2E: C6 06 000F R			mov lshift, 0			; If neither left or right shifts were
       00
 01DB  2E: C6 06 000E R			mov rshift, 0			; pressed and released at the same time
       00
 01E1  EB 15				jmp done			; set the both to 0 and exit
 01E3				check:
 01E3  2E: 80 3E 000F R			cmp lshift, 1			; Check to see if left was pressed
       01
 01E9  75 0D				jne done			; if not exit
 01EB  2E: 80 3E 000E R			cmp rshift, 1			; Check to see if right was pressed
       01
 01F1  75 05				jne done			; if not exit
 01F3				display:
 01F3  2E: F6 16 0010 R			not showit			; if it was toggle is initiated
 01F8				done:
 01F8  58				pop ax
 01F9  CF				iret				; return to the point of interrupt
 01FA				handle09 ENDP

 01FA				clear_clock PROC
 01FA  50				push ax				; Push used registers to stack
 01FB  53				push bx
 01FC  51				push cx
 01FD  52				push dx

 01FE  B7 00				mov bh, 0			; Move to bh the page number
 0200  B8 0300				mov ax, 0300h			; Use bios function to move the
 0203  CD 10				int 10h				; position of the cursor
 0205  52				push dx				; save current cursor position

 0206  B6 00				mov dh, 0			; Set row
 0208  B2 43				mov dl, 67			; set column
 020A  E8 FF10				call JumpCursor			; move cursor to top right
 020D  B4 0E				mov ah, 0Eh			; prepare ax for printing
 020F  B0 00				mov al, 0
 0211  B9 000C				mov cx, 12			; move to cx number of spaces to print
 0214					space:
 0214  B0 20				  mov al, 20h			; move space character to al
 0216  CD 10				  int 10h			; print 11 spaces
 0218  E2 FA				  loop space

 021A  5A				pop dx				; pop back original cursor position
 021B  E8 FEFF				call JumpCursor			; move cursor back to orginal position

 021E  5A				pop dx				; Pop back used registers and return
 021F  59				pop cx
 0220  5B				pop bx
 0221  58				pop ax
 0222  C3				ret
 0223				clear_clock ENDP

 0223				install09 PROC
 0223  1E			 	push ds
 0224  06				push es
 0225  50				push ax
 0226  53				push bx
 0227  52				push dx

					; before changing the vector,
					; get the old vector and save it!
 0228  B8 3509				mov ax, 3509h
 022B  CD 21				int 21h
 022D  2E: 89 1E 0153 R			mov word ptr orig_09, bx
 0232  2E: 8C 06 0155 R			mov word ptr orig_09+2, es

					; Now install the new 09 vector
 0237  0E				push cs				; put our code segment
 0238  1F				pop ds				; into ds
 0239  BA 018F R			mov dx, offset handle09		; with offset in dx
 023C  B8 2509				mov ax, 2509h
 023F  CD 21				int 21h

 0241  5A				pop dx
 0242  5B				pop bx
 0243  58				pop ax
 0244  07				pop es
 0245  1F				pop ds
 0246  C3				ret
 0247				install09 ENDP

 0247				install08 PROC
 0247  1E			 	push ds
 0248  06				push es
 0249  50				push ax
 024A  53				push bx
 024B  52				push dx

					; before changing the vector, 
					; get the old vector and save it!
 024C  B8 3508				mov ax, 3508h
 024F  CD 21				int 21h
 0251  2E: 89 1E 0157 R			mov word ptr orig_08, bx
 0256  2E: 8C 06 0159 R			mov word ptr orig_08+2, es

					; Now install the new 08 vector
 025B  0E				push cs				; put our code segment
 025C  1F				pop ds				; into ds
 025D  BA 015D R			mov dx, offset handle08		; with offset in dx
 0260  B8 2508				mov ax, 2508h
 0263  CD 21				int 21h

 0265  5A				pop dx
 0266  5B				pop bx
 0267  58				pop ax
 0268  07				pop es
 0269  1F				pop ds
 026A  C3				ret
 026B				install08 ENDP

 026B				uninstall09 PROC
					;; restore the original int 09h vector
 026B  1E				push ds
 026C  50				push ax
 026D  52				push dx

 026E  2E: 8B 16 0153 R			mov dx, word ptr orig_09
 0273  2E: 8E 1E 0155 R			mov ds, word ptr orig_09 + 2
 0278  B8 2509				mov ax, 2509h
 027B  CD 21				int 21h

 027D  5A				pop dx
 027E  58				pop ax
 027F  1F				pop ds
 0280  C3				ret
 0281				uninstall09 ENDP

 0281				uninstall08 PROC
					;; restore the original int 09h vector
 0281  1E				push ds
 0282  50				push ax
 0283  52				push dx

 0284  2E: 8B 16 0157 R			mov dx, word ptr orig_08
 0289  2E: 8E 1E 0159 R			mov ds, word ptr orig_08 + 2
 028E  B8 2508				mov ax, 2508h
 0291  CD 21				int 21h

 0293  5A				pop dx
 0294  58				pop ax
 0295  1F				pop ds
 0296  C3				ret
 0297				uninstall08 ENDP

 0297				main PROC
 0000				.data
 0000  00FF [			inputstr BYTE 255 DUP(0)
        00
       ]
 0297				.code
 0297  B8 ---- R			mov ax, @data
 029A  8E D8				mov ds, ax

 029C  BA 0000 R			mov dx, offset inputstr
 029F  8B DA				mov bx, dx
 02A1  B9 00FF				mov cx, lengthof inputstr

					; install handle09 as the new interrupt vector for int 09h.
 02A4  E8 FF7C				call install09
 02A7  E8 FF9D				call install08
					; done with install

 02AA				top:
									; read strings and echo them until 
 02AA  E8 0000 E			call readstring			; user enters an empty string
 02AD  E8 0000 E			call crlf
 02B0  80 3F 00				cmp byte ptr [bx], 0
 02B3  74 08				je done
 02B5  E8 0000 E			call WriteString
 02B8  E8 0000 E			call crlf
 02BB  EB ED				jmp top

 02BD				done:
 02BD  E8 FFC1				call uninstall08
 02C0  E8 FFA8				call uninstall09

 02C3  B8 4C00				mov ax, 4c00h
 02C6  CD 21				int 21h

 02C8				main ENDP
				END main



Microsoft (R) Macro Assembler Version 6.11		    10/31/16 02:21:30
clock.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CursorPosStruc . . . . . . . . .	 0002
  Ycoord . . . . . . . . . . . .	 0000	     Byte
  Xcoord . . . . . . . . . . . .	 0001	     Byte
ExtGetDskFreSpcStruc . . . . . .	 002C
  StructSize . . . . . . . . . .	 0000	     Word
  Level  . . . . . . . . . . . .	 0002	     Word
  SectorsPerCluster  . . . . . .	 0004	     DWord
  BytesPerSector . . . . . . . .	 0008	     DWord
  AvailableClusters  . . . . . .	 000C	     DWord
  TotalClusters  . . . . . . . .	 0010	     DWord
  AvailablePhysSectors . . . . .	 0014	     DWord
  TotalPhysSectors . . . . . . .	 0018	     DWord
  AvailableAllocationUnits . . .	 001C	     DWord
  TotalAllocationUnits . . . . .	 0020	     DWord
  Rsvd . . . . . . . . . . . . .	 0024	     DWord
FPU_ENVIRON  . . . . . . . . . .	 001C
  controlWord  . . . . . . . . .	 0000	     Word
  statusWord . . . . . . . . . .	 0004	     Word
  tagWord  . . . . . . . . . . .	 0008	     Word
  instrPtrLow  . . . . . . . . .	 000C	     Word
  opcodeAndInstrPtrHi  . . . . .	 0010	     DWord
  operandPtrLow  . . . . . . . .	 0014	     Word
  operandPtrHi . . . . . . . . .	 0018	     DWord
TimeRecord . . . . . . . . . . .	 0004
  hours  . . . . . . . . . . . .	 0000	     Byte
  minutes  . . . . . . . . . . .	 0001	     Byte
  seconds  . . . . . . . . . . .	 0002	     Byte
  hhss . . . . . . . . . . . . .	 0003	     Byte
VideoInfoStruc . . . . . . . . .	 0041
  supportedInfoPtr . . . . . . .	 0000	     DWord
  videoMode  . . . . . . . . . .	 0004	     Byte
  numCharColumns . . . . . . . .	 0005	     Word
  videoBufferLen . . . . . . . .	 0007	     Word
  videoBufferStartPtr  . . . . .	 0009	     Word
  cursors  . . . . . . . . . . .	 000B	     Word
  cursorStartLine  . . . . . . .	 001B	     Byte
  cursorEndLine  . . . . . . . .	 001C	     Byte
  activeDisplayPage  . . . . . .	 001D	     Byte
  adapterBasePortAddr  . . . . .	 001E	     Word
  currentRegister3B8or3D8  . . .	 0020	     Byte
  currentRegister3B9or3D9  . . .	 0021	     Byte
  numCharRows  . . . . . . . . .	 0022	     Byte
  characterScanHeight  . . . . .	 0023	     Word
  activeDisplayCode  . . . . . .	 0025	     Byte
  inactiveDisplayCode  . . . . .	 0026	     Byte
  numberOfColors . . . . . . . .	 0027	     Word
  numberOfVideoPages . . . . . .	 0029	     Byte
  numberOfScanLines  . . . . . .	 002A	     Word
  primaryCharBlock . . . . . . .	 002C	     Byte
  secondaryCharBlock . . . . . .	 002D	     Byte
  miscStateInfo  . . . . . . . .	 002E	     Byte
  videoMemAvail  . . . . . . . .	 0032	     Byte
  savePointerStateInfo . . . . .	 0033	     Byte


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_DATA  . . . . . . . . . . . . .	16 Bit	 00FF	  Word	  Public  'DATA'	
STACK  . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  'STACK'	 
_TEXT  . . . . . . . . . . . . .	16 Bit	 02C8	  Word	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

Clrscr . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetCommandtail . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
JumpCursor . . . . . . . . . . .	P Near	 011D	  _TEXT	Length= 000C Public STDCALL
OutClockCorner . . . . . . . . .	P Near	 0129	  _TEXT	Length= 002A Public STDCALL
  continue . . . . . . . . . . .	L Near	 013F	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0145	  _TEXT	
OutClock . . . . . . . . . . . .	P Near	 0013	  _TEXT	Length= 010A Public STDCALL
  sethourx . . . . . . . . . . .	L Near	 005B	  _TEXT	
  checkhr  . . . . . . . . . . .	L Near	 0061	  _TEXT	
  miltime  . . . . . . . . . . .	L Near	 0076	  _TEXT	
  printpm  . . . . . . . . . . .	L Near	 00FF	  _TEXT	
  removeampm . . . . . . . . . .	L Near	 0109	  _TEXT	
  remove . . . . . . . . . . . .	L Near	 010F	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0113	  _TEXT	
Random32 . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 0000	  Length= 0000 External STDCALL
clear_clock  . . . . . . . . . .	P Near	 01FA	  _TEXT	Length= 0029 Public STDCALL
  space  . . . . . . . . . . . .	L Near	 0214	  _TEXT	
handle08 . . . . . . . . . . . .	P Near	 015D	  _TEXT	Length= 0032 Public STDCALL
  continue . . . . . . . . . . .	L Near	 0173	  _TEXT	
  clear  . . . . . . . . . . . .	L Near	 0185	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 0188	  _TEXT	
handle09 . . . . . . . . . . . .	P Near	 018F	  _TEXT	Length= 00BC Public STDCALL
  ctrld  . . . . . . . . . . . .	L Near	 019A	  _TEXT	
  rightdown  . . . . . . . . . .	L Near	 01A5	  _TEXT	
  rightup  . . . . . . . . . . .	L Near	 01B1	  _TEXT	
  leftdown . . . . . . . . . . .	L Near	 01BD	  _TEXT	
  leftup . . . . . . . . . . . .	L Near	 01C9	  _TEXT	
  other  . . . . . . . . . . . .	L Near	 01D5	  _TEXT	
  check  . . . . . . . . . . . .	L Near	 01E3	  _TEXT	
  display  . . . . . . . . . . .	L Near	 01F3	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 01F8	  _TEXT	
install08  . . . . . . . . . . .	P Near	 0247	  _TEXT	Length= 0024 Public STDCALL
install09  . . . . . . . . . . .	P Near	 0223	  _TEXT	Length= 0024 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 0297	  _TEXT	Length= 0031 Public STDCALL
  top  . . . . . . . . . . . . .	L Near	 02AA	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 02BD	  _TEXT	
uninstall08  . . . . . . . . . .	P Near	 0281	  _TEXT	Length= 0016 Public STDCALL
uninstall09  . . . . . . . . . .	P Near	 026B	  _TEXT	Length= 0016 Public STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0003h	 
@Model . . . . . . . . . . . . .	Number	 0002h	 
@cmdline . . . . . . . . . . . .	Text   	 OFFSET __98765765cmdline
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
ACTION_CREATED_OPENED  . . . . .	Number	 0002h	 
ACTION_OPENED  . . . . . . . . .	Number	 0001h	 
ACTION_REPLACED_OPENED . . . . .	Number	 0003h	 
FILE_CREATE  . . . . . . . . . .	Number	 0010h	 
FILE_OPEN  . . . . . . . . . . .	Number	 0001h	 
FILE_TRUNCATE  . . . . . . . . .	Number	 0002h	 
LIGHT_BLUE . . . . . . . . . . .	Number	 0009h	 
LIGHT_CYAN . . . . . . . . . . .	Number	 000Bh	 
LIGHT_GRAY . . . . . . . . . . .	Number	 0007h	 
LIGHT_GREEN  . . . . . . . . . .	Number	 000Ah	 
LIGHT_MAGENTA  . . . . . . . . .	Number	 000Dh	 
LIGHT_RED  . . . . . . . . . . .	Number	 000Ch	 
OPEN_ACCESS_READONLY . . . . . .	Number	 0000h	 
OPEN_ACCESS_READWRITE  . . . . .	Number	 0002h	 
OPEN_ACCESS_RO_NOMODLASTACCESS .	Number	 0004h	 
OPEN_ACCESS_WRITEONLY  . . . . .	Number	 0001h	 
OPEN_FLAGS_ALIAS_HINT  . . . . .	Number	 0400h	 
OPEN_FLAGS_COMMIT  . . . . . . .	Number	 4000h	 
OPEN_FLAGS_NOCRITERR . . . . . .	Number	 2000h	 
OPEN_FLAGS_NOINHERIT . . . . . .	Number	 0080h	 
OPEN_FLAGS_NO_BUFFERING  . . . .	Number	 0100h	 
OPEN_FLAGS_NO_COMPRESS . . . . .	Number	 0200h	 
OPEN_SHARE_COMPATIBLE  . . . . .	Number	 0000h	 
OPEN_SHARE_DENYNONE  . . . . . .	Number	 0040h	 
OPEN_SHARE_DENYREADWRITE . . . .	Number	 0010h	 
OPEN_SHARE_DENYREAD  . . . . . .	Number	 0030h	 
OPEN_SHARE_DENYWRITE . . . . . .	Number	 0020h	 
_A_ARCH  . . . . . . . . . . . .	Number	 0020h	 
_A_HIDDEN  . . . . . . . . . . .	Number	 0002h	 
_A_NORMAL  . . . . . . . . . . .	Number	 0000h	 
_A_RDONLY  . . . . . . . . . . .	Number	 0001h	 
_A_SYSTEM  . . . . . . . . . . .	Number	 0004h	 
_A_VOLID . . . . . . . . . . . .	Number	 0008h	 
black  . . . . . . . . . . . . .	Number	 0000h	 
blue . . . . . . . . . . . . . .	Number	 0001h	 
brown  . . . . . . . . . . . . .	Number	 0006h	 
colon  . . . . . . . . . . . . .	Byte	 000A	  _TEXT	
count  . . . . . . . . . . . . .	Word	 015B	  _TEXT	
cyan . . . . . . . . . . . . . .	Number	 0003h	 
exit . . . . . . . . . . . . . .	Text   	 .EXIT
gray . . . . . . . . . . . . . .	Number	 0008h	 
green  . . . . . . . . . . . . .	Number	 0002h	 
hours  . . . . . . . . . . . . .	Byte	 000B	  _TEXT	
hourx  . . . . . . . . . . . . .	Byte	 0012	  _TEXT	
inputstr . . . . . . . . . . . .	Byte	 0000	  _DATA	
lightBlue  . . . . . . . . . . .	Number	 0009h	 
lightCyan  . . . . . . . . . . .	Number	 000Bh	 
lightGray  . . . . . . . . . . .	Number	 0007h	 
lightGreen . . . . . . . . . . .	Number	 000Ah	 
lightMagenta . . . . . . . . . .	Number	 000Dh	 
lightRed . . . . . . . . . . . .	Number	 000Ch	 
lshift . . . . . . . . . . . . .	Byte	 000F	  _TEXT	
magenta  . . . . . . . . . . . .	Number	 0005h	 
minutes  . . . . . . . . . . . .	Byte	 000C	  _TEXT	
orig_08  . . . . . . . . . . . .	DWord	 0157	  _TEXT	
orig_09  . . . . . . . . . . . .	DWord	 0153	  _TEXT	
red  . . . . . . . . . . . . . .	Number	 0004h	 
rshift . . . . . . . . . . . . .	Byte	 000E	  _TEXT	
seconds  . . . . . . . . . . . .	Byte	 000D	  _TEXT	
showit . . . . . . . . . . . . .	Byte	 0010	  _TEXT	
switch . . . . . . . . . . . . .	Byte	 0011	  _TEXT	
time . . . . . . . . . . . . . .	Byte	 0000	  _TEXT	
white  . . . . . . . . . . . . .	Number	 000Fh	 
yellow . . . . . . . . . . . . .	Number	 000Eh	 

	   0 Warnings
	   0 Errors
